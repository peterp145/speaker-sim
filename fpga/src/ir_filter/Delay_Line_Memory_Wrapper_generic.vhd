-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fpga_fir_test\Delay_Line_Memory_Wrapper_generic.vhd
-- Created: 2022-04-25 23:07:42
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Delay_Line_Memory_Wrapper_generic
-- Source Path: fpga_fir_test/ir_filter/fir_filter_hdl/Addressable Delay Line/Delay Line Memory_Wrapper_generic
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Delay_Line_Memory_Wrapper_generic IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( i_clk_dsp_122M88                  :   IN    std_logic;
        reset                             :   IN    std_logic;
        en                                :   IN    std_logic;
        en_1_1_1                          :   IN    std_logic;
        wr_din                            :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
        wr_addr                           :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
        wr_en                             :   IN    std_logic;  -- ufix1
        rd_addr                           :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
        rd_dout                           :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END Delay_Line_Memory_Wrapper_generic;


ARCHITECTURE rtl OF Delay_Line_Memory_Wrapper_generic IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( i_clk_dsp_122M88                :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL const_one                        : std_logic;
  SIGNAL filwait                          : std_logic := '0';
  SIGNAL en_1_1_1_delay1                  : std_logic := '1';
  SIGNAL not_en1_delay1                   : std_logic;
  SIGNAL filmode                          : std_logic;
  SIGNAL filreg                           : std_logic := '0';
  SIGNAL notfilreg                        : std_logic;
  SIGNAL ram_is_fastest_rate              : std_logic;
  SIGNAL en_1_1_1_delay2                  : std_logic := '1';
  SIGNAL en_1_1_1_delay3                  : std_logic := '1';
  SIGNAL not_en1_delay3                   : std_logic;
  SIGNAL not_en1                          : std_logic;
  SIGNAL not_en1_delay2                   : std_logic;
  SIGNAL not_en0                          : std_logic;
  SIGNAL ram_is_down2                     : std_logic;
  SIGNAL bypass1_and                      : std_logic;
  SIGNAL ram_is_down3                     : std_logic;
  SIGNAL wr_din_last_value                : signed(DataWidth - 1 DOWNTO 0) := (OTHERS => '0');  -- generic width
  SIGNAL wr_din_1                         : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL wr_addr_last_value               : unsigned(AddrWidth - 1 DOWNTO 0) := (OTHERS => '0');  -- generic width
  SIGNAL wr_addr_1                        : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL wr_en_last_value                 : std_logic := '0';  -- ufix1
  SIGNAL wr_en_1                          : std_logic;  -- ufix1
  SIGNAL rd_addr_last_value               : unsigned(AddrWidth - 1 DOWNTO 0) := (OTHERS => '0');  -- generic width
  SIGNAL rd_addr_1                        : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL rd_dout_1                        : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL ram_is_down4                     : std_logic;
  SIGNAL rd_dout_last_value               : signed(DataWidth - 1 DOWNTO 0) := (OTHERS => '0');  -- generic width
  SIGNAL rd_dout_bypass_1                 : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL rd_dout_bypass_last_value        : signed(DataWidth - 1 DOWNTO 0) := (OTHERS => '0');  -- generic width
  SIGNAL rd_dout_bypass_bypass            : signed(DataWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  u_SimpleDualPortRAM_generic : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => AddrWidth,
                 DataWidth => DataWidth
                 )
    PORT MAP( i_clk_dsp_122M88 => i_clk_dsp_122M88,
              wr_din => wr_din_1,
              wr_addr => wr_addr_1,
              wr_en => wr_en_1,  -- ufix1
              rd_addr => rd_addr_1,
              rd_dout => rd_dout_1
              );

  const_one <= '1';

  fil_wait_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF en = '1' THEN
        filwait <= const_one;
      END IF;
    END IF;
  END PROCESS fil_wait_process;

  ram_enb_delay1_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      en_1_1_1_delay1 <= en_1_1_1;
    END IF;
  END PROCESS ram_enb_delay1_process;

  not_en1_delay1 <= NOT en_1_1_1_delay1;

  filmode <= filwait AND (not_en1_delay1 AND en_1_1_1 AND en);

  fil_hold_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF filmode = '1' THEN
        filreg <= const_one;
      END IF;
    END IF;
  END PROCESS fil_hold_process;

  notfilreg <= NOT filreg;

  ram_is_fastest_rate <= en_1_1_1 AND en AND notfilreg;

  ram_enb_delay2_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      en_1_1_1_delay2 <= en_1_1_1_delay1;
    END IF;
  END PROCESS ram_enb_delay2_process;

  ram_enb_delay3_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      en_1_1_1_delay3 <= en_1_1_1_delay2;
    END IF;
  END PROCESS ram_enb_delay3_process;

  not_en1_delay3 <= NOT en_1_1_1_delay3;

  not_en1 <= NOT en_1_1_1;

  not_en1_delay2 <= NOT en_1_1_1_delay2;

  not_en0 <= NOT en;

  ram_is_down2 <= (en_1_1_1 AND not_en1_delay1 AND en_1_1_1_delay2 AND not_en1_delay3) OR (not_en1 AND en_1_1_1_delay1 AND not_en1_delay2 AND en_1_1_1_delay3) OR (not_en1 AND en_1_1_1_delay1 AND en_1_1_1_delay2 AND en_1_1_1_delay3 AND en) OR (en_1_1_1 AND not_en1_delay1 AND en_1_1_1_delay2 AND en_1_1_1_delay3 AND not_en0);

  bypass1_and <= ram_is_down2 AND en_1_1_1;

  ram_is_down3 <= (en_1_1_1 AND not_en1_delay1 AND not_en1_delay2 AND en_1_1_1_delay3) OR (not_en1 AND en_1_1_1_delay1 AND not_en1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND en_1_1_1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND en_1_1_1_delay2 AND en_1_1_1_delay3 AND en);

  wr_din_bypass_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF en_1_1_1 = '1' THEN
        wr_din_last_value <= wr_din;
      END IF;
    END IF;
  END PROCESS wr_din_bypass_process;

  wr_din_1 <= wr_din WHEN ram_is_fastest_rate = '1' ELSE
              wr_din_last_value;

  wr_addr_bypass_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF en_1_1_1 = '1' THEN
        wr_addr_last_value <= wr_addr;
      END IF;
    END IF;
  END PROCESS wr_addr_bypass_process;

  wr_addr_1 <= wr_addr WHEN ram_is_fastest_rate = '1' ELSE
               wr_addr_last_value;

  wr_en_bypass_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF en_1_1_1 = '1' THEN
        wr_en_last_value <= wr_en;
      END IF;
    END IF;
  END PROCESS wr_en_bypass_process;

  wr_en_1 <= wr_en WHEN ram_is_fastest_rate = '1' ELSE
             wr_en_last_value;

  rd_addr_bypass_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF en_1_1_1 = '1' THEN
        rd_addr_last_value <= rd_addr;
      END IF;
    END IF;
  END PROCESS rd_addr_bypass_process;

  rd_addr_1 <= rd_addr WHEN ram_is_fastest_rate = '1' ELSE
               rd_addr_last_value;

  ram_is_down4 <= (en_1_1_1 AND not_en1_delay1 AND not_en1_delay2 AND not_en1_delay3) OR (not_en1 AND en_1_1_1_delay1 AND not_en1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND en_1_1_1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND not_en1_delay2 AND en_1_1_1_delay3) OR NOT (en_1_1_1 OR en_1_1_1_delay1 OR en_1_1_1_delay2 OR en_1_1_1_delay3) OR (not_en1 AND not_en1_delay1 AND en_1_1_1_delay2 AND en_1_1_1_delay3 AND not_en0);

  rd_dout_bypass_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF (bypass1_and OR (ram_is_down4 AND en_1_1_1_delay2) OR (en_1_1_1 AND en_1_1_1_delay1 AND en_1_1_1_delay2 AND en_1_1_1_delay3)) = '1' THEN
        rd_dout_last_value <= rd_dout_1;
      END IF;
    END IF;
  END PROCESS rd_dout_bypass_process;

  rd_dout_bypass_1 <= rd_dout_1 WHEN ((ram_is_fastest_rate OR bypass1_and OR ram_is_down3) AND notfilreg) = '1' ELSE
                      rd_dout_last_value;

  rd_dout_bypass_2_process: PROCESS (i_clk_dsp_122M88)
  BEGIN
    IF i_clk_dsp_122M88'event AND i_clk_dsp_122M88 = '1' THEN
      IF en = '1' THEN
        rd_dout_bypass_last_value <= rd_dout_bypass_1;
      END IF;
    END IF;
  END PROCESS rd_dout_bypass_2_process;

  rd_dout_bypass_bypass <= rd_dout_bypass_1 WHEN (ram_is_fastest_rate OR ram_is_down2 OR filreg) = '1' ELSE
                           rd_dout_bypass_last_value;

  rd_dout <= rd_dout_bypass_bypass;

END rtl;

